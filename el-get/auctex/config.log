This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by auctex configure 11.86, which was
generated by GNU Autoconf 2.68.  Invocation command line was

  $ ./configure --without-texmf-dir --with-lispdir=/Users/yikelu/.emacs.d/el-get/auctex --with-emacs=/Applications/Emacs.app/Contents/MacOS/Emacs

## --------- ##
## Platform. ##
## --------- ##

hostname = Yikes-iMac.local
uname -m = x86_64
uname -r = 11.4.0
uname -s = Darwin
uname -v = Darwin Kernel Version 11.4.0: Mon Apr  9 19:32:15 PDT 2012; root:xnu-1699.26.8~1/RELEASE_X86_64

/usr/bin/uname -p = i386
/bin/uname -X     = unknown

/bin/arch              = unknown
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = Mach kernel version:
	 Darwin Kernel Version 11.4.0: Mon Apr  9 19:32:15 PDT 2012; root:xnu-1699.26.8~1/RELEASE_X86_64
Kernel configured for up to 4 processors.
4 processors are physically available.
4 processors are logically available.
Processor type: i486 (Intel 80486)
Processors active: 0 1 2 3
Primary memory available: 4.00 gigabytes
Default processor set: 126 tasks, 604 threads, 4 processors
Load average: 1.09, Mach factor: 2.90
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /usr/texbin
PATH: /usr/local/bin
PATH: /usr/bin
PATH: /bin
PATH: /usr/sbin
PATH: /sbin


## ----------- ##
## Core tests. ##
## ----------- ##

configure:1741: checking for make
configure:1757: found /usr/bin/make
configure:1768: result: make
configure:1784: checking whether make sets $(MAKE)
configure:1806: result: yes
configure:1858: checking for a BSD-compatible install
configure:1926: result: /usr/bin/install -c
configure:1939: checking for date in ChangeLog
configure:1946: result: 2012-07-04
configure:1948: checking for release in ChangeLog
configure:1954: result: not found, using 2012-07-04 instead
configure:2008: checking for /Applications/Emacs.app/Contents/MacOS/Emacs
configure:2038: result: /Applications/Emacs.app/Contents/MacOS/Emacs
configure:2054: checking if /Applications/Emacs.app/Contents/MacOS/Emacs is XEmacs
/Applications/Emacs.app/Contents/MacOS/Emacs -batch -no-site-file -eval (let* ((x (if (featurep (quote xemacs)) "yes" "no"))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-70828"))
Wrote /Users/yikelu/.emacs.d/el-get/auctex/conftest-70828
=> no
configure:2074: result: no
configure:2078: checking for Emacs prefix
/Applications/Emacs.app/Contents/MacOS/Emacs -batch -no-site-file -eval (let* ((cmd(pop command-line-args-left))(x (condition-case nil (let*
    ((prefix (directory-file-name (file-name-directory (executable-find cmd))))
     (parent (directory-file-name (file-name-directory prefix))))
    (if (string= (file-name-nondirectory prefix) "bin")
        (setq prefix parent)
      (if (string= (file-name-nondirectory parent) "bin")
         (setq prefix (directory-file-name (file-name-directory parent)))))
    prefix) (error NONE)))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-70828")) /Applications/Emacs.app/Contents/MacOS/Emacs
Wrote /Users/yikelu/.emacs.d/el-get/auctex/conftest-70828
=> /Applications/Emacs.app/Contents/MacOS
configure:2097: result: "/Applications/Emacs.app/Contents/MacOS"
configure:2127: checking if Emacs is recent enough
/Applications/Emacs.app/Contents/MacOS/Emacs -batch -no-site-file -eval (let* ((x (cond ((< emacs-major-version 21) "no")
			 ((> emacs-major-version 21) "yes")
			 ((< emacs-minor-version 01) "no")
			 (t "yes")))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-70828"))
Wrote /Users/yikelu/.emacs.d/el-get/auctex/conftest-70828
=> yes
configure:2141: result: yes
configure:2151: checking for MULE support
/Applications/Emacs.app/Contents/MacOS/Emacs -batch -eval (let* ((x (condition-case nil (require 'mule ) 	(error (prog1 nil (message "mule not found")))))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-70828"))
Wrote /Users/yikelu/.emacs.d/el-get/auctex/conftest-70828
=> mule
configure:2185: result: yes
configure:2230: checking if build directory is valid
/Applications/Emacs.app/Contents/MacOS/Emacs -batch -eval (let* ((x (if (or (member (directory-file-name default-directory) load-path)	      (member (file-name-as-directory default-directory) load-path))	 "no" "yes"))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-70828"))
Wrote /Users/yikelu/.emacs.d/el-get/auctex/conftest-70828
=> yes
configure:2246: result: yes
configure:2334: checking where lisp files go
configure:2406: result: /Users/yikelu/.emacs.d/el-get/auctex
configure:2410: checking what file to use for auctex startup
configure:2437: result: /Users/yikelu/.emacs.d/el-get/auctex/auctex.el
configure:2455: checking where the package lisp files go
/Applications/Emacs.app/Contents/MacOS/Emacs -batch -no-site-file -eval (let* ((path(pop command-line-args-left)) (lispdir(pop command-line-args-left)) (startup(pop command-line-args-left)) (target(pop command-line-args-left))(x (progn (setq path (directory-file-name path))
  (if (or target
          (not (string= (car load-path) (directory-file-name (car load-path)))))
    (setq path (file-name-as-directory path)))
  (setq path (expand-file-name path lispdir))
  (setq startupdir (file-name-directory (expand-file-name startup lispdir)))
  (prin1-to-string
    (if (or (string-match "\`\.\."
              (setq relname (file-relative-name startupdir lispdir)))
            (file-name-absolute-p relname)
	    (string-match "\`\.\."
              (setq relname (file-relative-name path lispdir)))
 	    (file-name-absolute-p relname))
	  (concat path target)
	(cond (target
	       `(expand-file-name
                   ,(file-relative-name (concat path target) startupdir)
	           (file-name-directory load-file-name)))
              ((string= path startupdir)
	         '(file-name-directory load-file-name))
	      ((string= path (directory-file-name startupdir))
                 '(directory-file-name (file-name-directory load-file-name)))
              (t
	       `(expand-file-name
                   ,(file-relative-name path startupdir)
	           (file-name-directory load-file-name))))))))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-70828")) /Users/yikelu/.emacs.d/el-get/auctex/auctex /Users/yikelu/.emacs.d/el-get/auctex /Users/yikelu/.emacs.d/el-get/auctex/tex-site.el
Wrote /Users/yikelu/.emacs.d/el-get/auctex/conftest-70828
=> (expand-file-name "auctex" (file-name-directory load-file-name))
configure:2536: result: /Users/yikelu/.emacs.d/el-get/auctex/auctex
configure:2539: checking where the data files go
/Applications/Emacs.app/Contents/MacOS/Emacs -batch -no-site-file -eval (let* ((path(pop command-line-args-left)) (lispdir(pop command-line-args-left)) (startup(pop command-line-args-left)) (target(pop command-line-args-left))(x (progn (setq path (directory-file-name path))
  (if (or target
          (not (string= (car load-path) (directory-file-name (car load-path)))))
    (setq path (file-name-as-directory path)))
  (setq path (expand-file-name path lispdir))
  (setq startupdir (file-name-directory (expand-file-name startup lispdir)))
  (prin1-to-string
    (if (or (string-match "\`\.\."
              (setq relname (file-relative-name startupdir lispdir)))
            (file-name-absolute-p relname)
	    (string-match "\`\.\."
              (setq relname (file-relative-name path lispdir)))
 	    (file-name-absolute-p relname))
	  (concat path target)
	(cond (target
	       `(expand-file-name
                   ,(file-relative-name (concat path target) startupdir)
	           (file-name-directory load-file-name)))
              ((string= path startupdir)
	         '(file-name-directory load-file-name))
	      ((string= path (directory-file-name startupdir))
                 '(directory-file-name (file-name-directory load-file-name)))
              (t
	       `(expand-file-name
                   ,(file-relative-name path startupdir)
	           (file-name-directory load-file-name))))))))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-70828")) /Users/yikelu/.emacs.d/el-get/auctex/auctex /Users/yikelu/.emacs.d/el-get/auctex /Users/yikelu/.emacs.d/el-get/auctex/tex-site.el
Wrote /Users/yikelu/.emacs.d/el-get/auctex/conftest-70828
=> (expand-file-name "auctex" (file-name-directory load-file-name))
configure:2620: result: /Users/yikelu/.emacs.d/el-get/auctex/auctex
/Applications/Emacs.app/Contents/MacOS/Emacs -batch -no-site-file -eval (let* ((path(pop command-line-args-left)) (lispdir(pop command-line-args-left)) (startup(pop command-line-args-left)) (target(pop command-line-args-left))(x (progn (setq path (directory-file-name path))
  (if (or target
          (not (string= (car load-path) (directory-file-name (car load-path)))))
    (setq path (file-name-as-directory path)))
  (setq path (expand-file-name path lispdir))
  (setq startupdir (file-name-directory (expand-file-name startup lispdir)))
  (prin1-to-string
    (if (or (string-match "\`\.\."
              (setq relname (file-relative-name startupdir lispdir)))
            (file-name-absolute-p relname)
	    (string-match "\`\.\."
              (setq relname (file-relative-name path lispdir)))
 	    (file-name-absolute-p relname))
	  (concat path target)
	(cond (target
	       `(expand-file-name
                   ,(file-relative-name (concat path target) startupdir)
	           (file-name-directory load-file-name)))
              ((string= path startupdir)
	         '(file-name-directory load-file-name))
	      ((string= path (directory-file-name startupdir))
                 '(directory-file-name (file-name-directory load-file-name)))
              (t
	       `(expand-file-name
                   ,(file-relative-name path startupdir)
	           (file-name-directory load-file-name))))))))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-70828"))  /Users/yikelu/.emacs.d/el-get/auctex /Users/yikelu/.emacs.d/el-get/auctex/auctex.el tex-site.el
Wrote /Users/yikelu/.emacs.d/el-get/auctex/conftest-70828
=> (expand-file-name "tex-site.el" (file-name-directory load-file-name))
configure:2697: checking where the info files go
configure:2699: result: ${datarootdir}/info
configure:2710: checking where automatically generated global style hooks go
configure:2720: result: ${localstatedir}/auctex
/Applications/Emacs.app/Contents/MacOS/Emacs -batch -no-site-file -eval (let* ((path(pop command-line-args-left)) (lispdir(pop command-line-args-left)) (startup(pop command-line-args-left)) (target(pop command-line-args-left))(x (progn (setq path (directory-file-name path))
  (if (or target
          (not (string= (car load-path) (directory-file-name (car load-path)))))
    (setq path (file-name-as-directory path)))
  (setq path (expand-file-name path lispdir))
  (setq startupdir (file-name-directory (expand-file-name startup lispdir)))
  (prin1-to-string
    (if (or (string-match "\`\.\."
              (setq relname (file-relative-name startupdir lispdir)))
            (file-name-absolute-p relname)
	    (string-match "\`\.\."
              (setq relname (file-relative-name path lispdir)))
 	    (file-name-absolute-p relname))
	  (concat path target)
	(cond (target
	       `(expand-file-name
                   ,(file-relative-name (concat path target) startupdir)
	           (file-name-directory load-file-name)))
              ((string= path startupdir)
	         '(file-name-directory load-file-name))
	      ((string= path (directory-file-name startupdir))
                 '(directory-file-name (file-name-directory load-file-name)))
              (t
	       `(expand-file-name
                   ,(file-relative-name path startupdir)
	           (file-name-directory load-file-name))))))))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-70828")) /usr/local/var/auctex /Users/yikelu/.emacs.d/el-get/auctex /Users/yikelu/.emacs.d/el-get/auctex/tex-site.el
Wrote /Users/yikelu/.emacs.d/el-get/auctex/conftest-70828
=> "/usr/local/var/auctex"
configure:2800: checking for tex
configure:2818: found /usr/texbin/tex
configure:2831: result: /usr/texbin/tex
configure:2841: checking for pdftex
configure:2859: found /usr/texbin/pdftex
configure:2872: result: /usr/texbin/pdftex
configure:2882: checking for dvips
configure:2900: found /usr/texbin/dvips
configure:2913: result: /usr/texbin/dvips
configure:2928: checking for perl
configure:2946: found /usr/bin/perl
configure:2959: result: /usr/bin/perl
configure:2973: checking for makeinfo
configure:2991: found /usr/bin/makeinfo
configure:3004: result: /usr/bin/makeinfo
configure:3014: checking for texi2html
configure:3032: found /usr/bin/texi2html
configure:3045: result: /usr/bin/texi2html
configure:3055: checking for texi2dvi
configure:3073: found /usr/bin/texi2dvi
configure:3086: result: /usr/bin/texi2dvi
configure:3096: checking for texi2pdf
configure:3114: found /usr/bin/texi2pdf
configure:3127: result: /usr/bin/texi2pdf
configure:3142: checking for install-info
configure:3160: found /usr/bin/install-info
configure:3173: result: /usr/bin/install-info
configure:3448: creating ./config.status

## ---------------------- ##
## Running config.status. ##
## ---------------------- ##

This file was extended by auctex config.status 11.86, which was
generated by GNU Autoconf 2.68.  Invocation command line was

  CONFIG_FILES    = 
  CONFIG_HEADERS  = 
  CONFIG_LINKS    = 
  CONFIG_COMMANDS = 
  $ ./config.status 

on Yikes-iMac.local

config.status:763: creating Makefile
config.status:763: creating tex-site.el.out
config.status:763: creating doc/Makefile
config.status:763: creating auctex.el
configure:4540: === configuring in preview (/Users/yikelu/.emacs.d/el-get/auctex/preview)
configure:4603: running /bin/sh ./configure --disable-option-checking '--prefix=/usr/local'  '--without-texmf-dir' '--with-lispdir=/Users/yikelu/.emacs.d/el-get/auctex' '--with-emacs=/Applications/Emacs.app/Contents/MacOS/Emacs' --cache-file=/dev/null --srcdir=.

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_env_INSTALL_INFO_set=
ac_cv_env_INSTALL_INFO_value=
ac_cv_env_MAKEINFO_set=
ac_cv_env_MAKEINFO_value=
ac_cv_env_PERL_set=
ac_cv_env_PERL_value=
ac_cv_env_build_alias_set=
ac_cv_env_build_alias_value=
ac_cv_env_host_alias_set=
ac_cv_env_host_alias_value=
ac_cv_env_target_alias_set=
ac_cv_env_target_alias_value=
ac_cv_path_DVIPS=/usr/texbin/dvips
ac_cv_path_EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs
ac_cv_path_INSTALL_INFO=/usr/bin/install-info
ac_cv_path_MAKEINFO=/usr/bin/makeinfo
ac_cv_path_PDFTEX=/usr/texbin/pdftex
ac_cv_path_PERL=/usr/bin/perl
ac_cv_path_TEX=/usr/texbin/tex
ac_cv_path_TEXI2DVI=/usr/bin/texi2dvi
ac_cv_path_TEXI2HTML=/usr/bin/texi2html
ac_cv_path_TEXI2PDF=/usr/bin/texi2pdf
ac_cv_path_install='/usr/bin/install -c'
ac_cv_prog_MAKECMD=make
ac_cv_prog_make_make_set=yes

## ----------------- ##
## Output variables. ##
## ----------------- ##

AUCTEXDATE='2012-07-04'
AUCTEXVERSION='2012-07-04'
DEFS='-DPACKAGE_NAME=\"auctex\" -DPACKAGE_TARNAME=\"auctex\" -DPACKAGE_VERSION=\"11.86\" -DPACKAGE_STRING=\"auctex\ 11.86\" -DPACKAGE_BUGREPORT=\"bug-auctex@gnu.org\" -DPACKAGE_URL=\"\"'
DVIPS='/usr/texbin/dvips'
ECHO_C='\c'
ECHO_N=''
ECHO_T=''
EMACS='/Applications/Emacs.app/Contents/MacOS/Emacs'
EMACS_FLAVOR='emacs'
HAVE_mule='yes'
INSTALL_DATA='${INSTALL} -m 644'
INSTALL_INFO='/usr/bin/install-info'
INSTALL_PROGRAM='${INSTALL}'
INSTALL_SCRIPT='${INSTALL}'
LIBOBJS=''
LIBS=''
LTLIBOBJS=''
MAKECMD='make'
MAKEINFO='/usr/bin/makeinfo'
MULEELC='tex-jp.elc'
MULESRC='tex-jp.el'
PACKAGE_BUGREPORT='bug-auctex@gnu.org'
PACKAGE_NAME='auctex'
PACKAGE_STRING='auctex 11.86'
PACKAGE_TARNAME='auctex'
PACKAGE_URL=''
PACKAGE_VERSION='11.86'
PATH_SEPARATOR=':'
PDFTEX='/usr/texbin/pdftex'
PERL='/usr/bin/perl'
SET_MAKE=''
SHELL='/bin/sh'
TEX='/usr/texbin/tex'
TEXI2DVI='/usr/bin/texi2dvi'
TEXI2HTML='/usr/bin/texi2html'
TEXI2PDF='/usr/bin/texi2pdf'
XEMACS='no'
auctexstartfile='/Users/yikelu/.emacs.d/el-get/auctex/auctex.el'
autodir='${localstatedir}/auctex'
bindir='${exec_prefix}/bin'
build_alias=''
datadir='${datarootdir}'
datarootdir='${prefix}/share'
docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
dvidir='${docdir}'
exec_prefix='${prefix}'
host_alias=''
htmldir='${docdir}'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
libdir='${exec_prefix}/lib'
libexecdir='${exec_prefix}/libexec'
lispautodir='"/usr/local/var/auctex"'
lispdir='/Users/yikelu/.emacs.d/el-get/auctex'
lisppackagedatadir='(expand-file-name "auctex" (file-name-directory load-file-name))'
lisppackagelispdir='(expand-file-name "auctex" (file-name-directory load-file-name))'
lisptexsite='(expand-file-name "tex-site.el" (file-name-directory load-file-name))'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
mandir='${datarootdir}/man'
oldincludedir='/usr/include'
packagedatadir='/Users/yikelu/.emacs.d/el-get/auctex/auctex'
packagedir='no'
packagelispdir='/Users/yikelu/.emacs.d/el-get/auctex/auctex'
pdfdir='${docdir}'
prefix='/usr/local'
preview_enabled='yes'
program_transform_name='s,x,x,'
psdir='${docdir}'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
subdirs=' preview'
sysconfdir='${prefix}/etc'
target_alias=''
texsite=''

## ----------- ##
## confdefs.h. ##
## ----------- ##

/* confdefs.h */
#define PACKAGE_NAME "auctex"
#define PACKAGE_TARNAME "auctex"
#define PACKAGE_VERSION "11.86"
#define PACKAGE_STRING "auctex 11.86"
#define PACKAGE_BUGREPORT "bug-auctex@gnu.org"
#define PACKAGE_URL ""

configure: exit 0
