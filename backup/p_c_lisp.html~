<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
               "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
lang="en" xml:lang="en">
<head>
<title>p<sub>c</sub><sub>lisp</sub></title>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1"/>
<meta name="generator" content="Org-mode"/>
<meta name="generated" content="2012-06-20 22:51:33 EDT"/>
<meta name="author" content="Yike Lu"/>
<meta name="description" content=""/>
<meta name="keywords" content=""/>
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  html { font-family: Times, serif; font-size: 12pt; }
  .title  { text-align: center; }
  .todo   { color: red; }
  .done   { color: green; }
  .tag    { background-color: #add8e6; font-weight:normal }
  .target { }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  p.verse { margin-left: 3% }
  pre {
	border: 1pt solid #AEBDCC;
	background-color: #F3F5F7;
	padding: 5pt;
	font-family: courier, monospace;
        font-size: 90%;
        overflow:auto;
  }
  table { border-collapse: collapse; }
  td, th { vertical-align: top; }
  dt { font-weight: bold; }
  div.figure { padding: 0.5em; }
  div.figure p { text-align: center; }
  .linenr { font-size:smaller }
  .code-highlighted {background-color:#ffff00;}
  .org-info-js_info-navigation { border-style:none; }
  #org-info-js_console-label { font-size:10px; font-weight:bold;
                               white-space:nowrap; }
  .org-info-js_search-highlight {background-color:#ffff00; color:#000000;
                                 font-weight:bold; }
  /*]]>*/-->
</style>
<script type="text/javascript">
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">

<h1 class="title">p<sub>c</sub><sub>lisp</sub></h1>


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 Google Tech Talk </a>
<ul>
<li><a href="#sec-1.1">1.1 Language Affecting Architecture </a>
<ul>
<li><a href="#sec-1.1.1">1.1.1 What is Architecture? </a></li>
</ul>
</li>
<li><a href="#sec-1.2">1.2 Java vs Lisp Example </a>
<ul>
<li><a href="#sec-1.2.1">1.2.1 Visitor Pattern in Java </a></li>
<li><a href="#sec-1.2.2">1.2.2 Same Thing in Common Lisp </a></li>
</ul>
</li>
<li><a href="#sec-1.3">1.3 Error Handling in Different Languages </a>
<ul>
<li><a href="#sec-1.3.1">1.3.1 Invariants </a></li>
<li><a href="#sec-1.3.2">1.3.2 Common Lisp method </a></li>
</ul>
</li>
<li><a href="#sec-1.4">1.4 Macros </a>
<ul>
<li><a href="#sec-1.4.1">1.4.1 deftest example (from book) </a></li>
<li><a href="#sec-1.4.2">1.4.2 Macro differences from functions </a></li>
</ul></li>
</ul>
</li>
<li><a href="#sec-2">2 Practical Common Lisp Book </a>
<ul>
<li><a href="#sec-2.1">2.1 Chapter 2 - REPL </a></li>
<li><a href="#sec-2.2">2.2 Chapter 3 - DB Example </a></li>
<li><a href="#sec-2.3">2.3 Chapter 4 - Syntax and Semantics </a></li>
<li><a href="#sec-2.4">2.4 Chapter 5 - Functions </a></li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Google Tech Talk </h2>
<div class="outline-text-2" id="text-1">


</div>

<div id="outline-container-1.1" class="outline-3">
<h3 id="sec-1.1"><span class="section-number-3">1.1</span> Language Affecting Architecture </h3>
<div class="outline-text-3" id="text-1.1">



</div>

<div id="outline-container-1.1.1" class="outline-4">
<h4 id="sec-1.1.1"><span class="section-number-4">1.1.1</span> What is Architecture? </h4>
<div class="outline-text-4" id="text-1.1.1">

<ul>
<li>
It's very hard to back out the theory of the program if you didn't write it or work with those who did.
</li>
<li>
Higher level languages make it easier to encode the theory of the program so others can back out.
</li>
<li>
Naur: when you develop a program, you are developing a theory of how the program works.
</li>
<li>
Patterns. Christopher Alexander (building architect) theories got applied in software.
</li>
<li>
To what extent are the pattern languages affected by the implementation languages?
</li>
<li id="sec-1.1.1.1">What are patterns? From Christopher Alexander <br/>
<ul>
<li>
Patterns are built to resolve forces.
</li>
<li>
e.g., human preferences
<ul>
<li>
People like light, so rooms with natural sunlight are preferred. Two light source rooms.
</li>
</ul>
</li>
<li>
Cultural things.
</li>
</ul>
</li>
<li id="sec-1.1.1.2">Software forces <br/>
<ul>
<li>
Typically a lot of it is just math
<ul>
<li>
Big O complexity
</li>
</ul>
</li>
<li>
Software patterns are built by people who "live in software"
</li>
<li>
I.e., the developers who have to deal with it day to day
<ul>
<li>
Not for users.
</li>
</ul>
</li>
<li>
All this stuff is put into a pattern language
</li>
<li>
Need a core that resolves all the forces
</li>
</ul>
</li>
<li id="sec-1.1.1.3">Patterns as they relate to languages <br/>
<ul>
<li>
The universe of tools is already software.
<ul>
<li>
Creates the universe in which you live
</li>
<li>
And creates the forces that you deal with
</li>
</ul>
</li>
</ul>
</li>
<li id="sec-1.1.1.4">Sapir Whorf <br/>
<ul>
<li>
Yeah yeah, I know about it already. (Human) languages influence the way you think.

</li>
</ul>
</li>
</ul>
</div>
</div>

</div>

<div id="outline-container-1.2" class="outline-3">
<h3 id="sec-1.2"><span class="section-number-3">1.2</span> Java vs Lisp Example </h3>
<div class="outline-text-3" id="text-1.2">


</div>

<div id="outline-container-1.2.1" class="outline-4">
<h4 id="sec-1.2.1"><span class="section-number-4">1.2.1</span> Visitor Pattern in Java </h4>
<div class="outline-text-4" id="text-1.2.1">

<ul>
<li>
Multiple dispatch via walking AST of objects.
</li>
<li>
Different operations on different node types. The "double dispatch" is the essence of it.
</li>
<li>
Normal polymorphic dispatch - interface Priceable, and other classes implement it.
</li>
<li>
It's not overloading - it's not about naming things the same, but binding it together using the interface.
</li>
<li>
Hand coded dispatching would be just a case statement in the function, casing on types. Visitor is supposed to solve this.
</li>
<li>
Hard to add new classes
</li>
<li>
The result is kind of like rolling your own inheritance to handle double dispatch.
</li>
</ul>
</div>

</div>

<div id="outline-container-1.2.2" class="outline-4">
<h4 id="sec-1.2.2"><span class="section-number-4">1.2.2</span> Same Thing in Common Lisp </h4>
<div class="outline-text-4" id="text-1.2.2">

<ul>
<li>
Idea of generic functions.
</li>
<li>
Lisp OO started by porting back smalltalk features, especially message passing/dispatch.
</li>
<li>
Lisp generalized single dispatch into multiple dispatch. This got into CLOS
</li>
<li>
define variadic function, and can dispatch on any of the required args.
</li>
<li>
Methods don't belong to classes anymore.
</li>
<li>
Instead define classes as just data, generics are functions that could in theory be applied anything.
</li>
<li>
Then the methods are specific implementations of generics for specific classes.
</li>
<li>
True multiple dispatch, and only one mechanism. Multiple dispatch and multiple inheritance in CL
</li>
<li>
This generalization allowed crazy things.
</li>
<li>
Main method, and methods that run before, during, after, etc. (Ch 23 - 24)
</li>
<li>
To manage conflicts, there's a canonical algorithm for sorting the priority of methods.

</li>
</ul>
</div>
</div>

</div>

<div id="outline-container-1.3" class="outline-3">
<h3 id="sec-1.3"><span class="section-number-3">1.3</span> Error Handling in Different Languages </h3>
<div class="outline-text-3" id="text-1.3">



</div>

<div id="outline-container-1.3.1" class="outline-4">
<h4 id="sec-1.3.1"><span class="section-number-4">1.3.1</span> Invariants </h4>
<div class="outline-text-4" id="text-1.3.1">

<ul>
<li>
Pre cond, post cond, class invariance
</li>
<li>
True before, true after
</li>
<li>
Pre condition can be divided into
<ul>
<li>
provable by static analysis (the formal pre condition classic notion)
</li>
<li>
Or not (i.e., random shit that can't be logically handled, like asynchronocity) and other corner cases
</li>
</ul>
</li>
<li>
That's what error handling is for.
</li>
<li>
If you satisfy your formal pre but can't your posts, should "handle errors cleanly", i.e. code should fail cleanly. Then deal with lower level failures.
</li>
<li>
C style is return 0 or 1 etc
</li>
<li>
Python/Java style is exception handling. Satisfy the base requirement - if you call something that fails, you must either handle it or fail yourself.
</li>
<li>
Sometimes recover from stack unwinds, but mostly not, most of the time you lost the state.

</li>
</ul>
</div>

</div>

<div id="outline-container-1.3.2" class="outline-4">
<h4 id="sec-1.3.2"><span class="section-number-4">1.3.2</span> Common Lisp method </h4>
<div class="outline-text-4" id="text-1.3.2">

<ul>
<li>
Traditionally, signal at the bottom, handle at the top.
</li>
<li>
CL - we have signal, but don't unwind.
<ul>
<li>
Let signal go up the stack, but higher on the stack can be handled.
</li>
<li>
There's a restart that can be established between, unwind to restart and then go forward.

</li>
</ul>
</li>
<li id="sec-1.3.2.1">Example: Log analyzer <br/>
<ul>
<li>
log-analyzer -&gt; analyze-log function -&gt; parse-log-file -&gt; parse log entry
</li>
<li>
Entry parser can recognize failures, but may not be the appropriate function to handle the error
</li>
<li>
Could have a fatal error, or skip it, or apply some heuristic.

</li>
<li id="sec-1.3.2.1.1">Java Handling <br/>
<ul>
<li>
Java would throw at the bottom, propagate signal up to the top level app, which knows the policy.
</li>
<li>
However in propagation, the stack unwinds and state is lost, so lose the ability to do the right thing.

</li>
</ul>
</li>
<li id="sec-1.3.2.1.2">Common Lisp version <br/>
<ul>
<li>
Error signalled, no unwind.
</li>
<li>
Signal moves up, to find the right handler.
</li>
<li>
low level parser can give possible strategies to the handler.
</li>
<li>
Top level handler catches signal and looks for e.g. skip entry restart.
</li>
<li>
Invokes restart, and the low level parser skips it and moves on.
</li>
<li>
Typically used for error handling, but can be used for communicating up and down the stack

</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>

</div>

<div id="outline-container-1.4" class="outline-3">
<h3 id="sec-1.4"><span class="section-number-3">1.4</span> Macros </h3>
<div class="outline-text-3" id="text-1.4">

<ul>
<li>
Could add the above features in CL, with the same syntax as it is now.
</li>
<li>
In Java, could add the same stuff (Turing Complete), but there's no way to hide it. Can't change the syntax

</li>
</ul>

</div>

<div id="outline-container-1.4.1" class="outline-4">
<h4 id="sec-1.4.1"><span class="section-number-4">1.4.1</span> deftest example (from book) </h4>
<div class="outline-text-4" id="text-1.4.1">

<ul>
<li>
done using macro expansion, expands to something pretty big
</li>
<li>
saves lots of work

</li>
</ul>
</div>

</div>

<div id="outline-container-1.4.2" class="outline-4">
<h4 id="sec-1.4.2"><span class="section-number-4">1.4.2</span> Macro differences from functions </h4>
<div class="outline-text-4" id="text-1.4.2">

<ul>
<li>
Compile time expansion.
</li>
<li>
Can use arbitrary syntax, can write it nicely.

</li>
</ul>
</div>
</div>
</div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Practical Common Lisp Book </h2>
<div class="outline-text-2" id="text-2">



</div>

<div id="outline-container-2.1" class="outline-3">
<h3 id="sec-2.1"><span class="section-number-3">2.1</span> Chapter 2 - REPL </h3>
<div class="outline-text-3" id="text-2.1">

<ul>
<li>
load using <code>(load "hello.lisp")</code>
</li>
<li>
<code>(compile-file "hello.lisp")</code>
</li>
<li>
<code>(load (compile-file "hello.lisp"))</code>
</li>
<li>
.fasl files for compiled versions

</li>
</ul>
</div>

</div>

<div id="outline-container-2.2" class="outline-3">
<h3 id="sec-2.2"><span class="section-number-3">2.2</span> Chapter 3 - DB Example </h3>
<div class="outline-text-3" id="text-2.2">

<ul>
<li>
<code>(list :a 1 :b 2 :c 3)</code> for property list or plist
<ul>
<li>
Unfortunately plists are actually lists and not hashes.
</li>
</ul>
</li>
<li>
<code>(getf plist :prop)</code> returns the value associated with <code>:prop</code>
</li>
<li>
<code>(defvar *db* nil)</code> - the <code>*name*</code> convention is for global vars
</li>
<li>
<code>(push x l)</code> destructively prepends <code>x</code> to <code>l</code>.
</li>
<li>
<code>(dolist (item list) body)</code> - [body for each item in list]
</li>
<li>
<code>(format stream fmt_str obj)</code> - stream=t implies stdout
<ul>
<li>
there's a lot going on with format in fmt<sub>str</sub>; there's a whole sub language
that describes how to format.
</li>
<li>
<code>*query-io*</code> is another identifier for a stream.
</li>
<li>
sometimes <code>(force-output stream)</code> is needed to "flush the buffer" i guess
</li>
<li>
<code>(read-line stream)</code> works as <code>(read-line *query-io*)</code>
</li>
</ul>
</li>
<li>
<code>(parse-integer int_str)</code>; <code>(parse-integer int_str :junk-allowed t)</code>
</li>
<li>
<code>(y-or-n-p prompt_str)</code> automatically reads yes or no into boolean.
</li>
<li>
<code>(loop)</code> is introduced here but not elaborated. I am not particularly
interested in exploring the details of it either.
</li>
<li>
<code>(with-open-file)</code> <code>(with-standard-io-syntax)</code> used in saving the database.
These apparently emit lisp readable formats, so that one can read it in later
</li>
<li>
Example in function form:



<pre class="example">(defun load-db (filename)
  (with-open-file (in filename)
    (with-standard-io-syntax
      (setf *db* (read in)))))
</pre>



</li>
<li>
read from stream in. <code>with-standard-io-syntax</code> makes the read compatible.
</li>
<li>
"The SETF macro is Common Lisp's main assignment operator.
It sets its first argument to the result of evaluating its second argument."
</li>
<li>
<code>(remove-if-not fn list)</code> is basically "filter", not destructive. <code>(evenp)</code> tests for even
</li>
<li>
<code>(defun foo (&amp;key a b c) body)</code> &lt;=&gt; <code>(foo :a 2 ...)</code>
<ul>
<li>
If you don't pass an arg explicitly, then it defaults to nil
</li>
<li>
However you can set default args as well as a "supplied-p" param
</li>
<li>
Example: <code>z(defun foo (&amp;key a (b 20) (c 30 c-p)) (list a b c c-p))</code>
where <code>b</code> defaults to <code>20</code>, <code>c</code> defaults to <code>30</code> and <code>c-p</code> returns <code>nil</code> if no arg
passed to <code>c</code> directly.
</li>
</ul>
</li>
<li>
IMPORTANT - a GREAT macro example here: <code>(defmacro backwards (expr) (reverse expr))</code>
<ul>
<li>
<code>(backwards ("hello, world" t format))</code> =&gt; <code>hello, world NIL</code>
</li>
<li>
similarly, <code>(backwards (1 2 +))</code> =&gt; <code>(+ 2 1)</code> =&gt; <code>3</code>
</li>
<li>
This really demonstrates the power of macros in a simple but easy to understand way.
</li>
<li>
The expr passed in is treated as data, so you can use all manner of list traversal
hackery to make your way through the list and transform it.

</li>
</ul>
</li>
</ul>
</div>

</div>

<div id="outline-container-2.3" class="outline-3">
<h3 id="sec-2.3"><span class="section-number-3">2.3</span> Chapter 4 - Syntax and Semantics </h3>
<div class="outline-text-3" id="text-2.3">

<ul>
<li>
LISP has a reader and an evaluator.
<ul>
<li>
Legal input to the reader is basically s-expressions plus a few extensions
</li>
<li>
On the other hand, the evaluator takes only legal Lisp-forms,
i.e., <code>(symbol ...)</code>.
</li>
</ul>
</li>
<li>
Macro evaluation - function taking S expressions as args, and returning a Lisp form.
<ul>
<li>
The args are passed to the function, and then the returned form (the expansion)
is evaluated according to normal rules.
</li>
<li>
Distinguish between what happens at REPL vs compiling.
<ul>
<li>
At the REPL, the macro is expanded and the resulting full expr is eval'd immediately.
</li>
<li>
On the other hand, when compiling, macros are recursively expanded until there
are no macro forms left (only funcall and specials). This is then compiled and loaded.
</li>
</ul>
</li>
<li>
Key insight, as above - macro args don't need to be list forms, only valid S-expressions
</li>
</ul>
</li>
<li>
use = to compare numbers, char= to compare characters.
</li>
<li>
There are four "generic" equality predicates.
<ul>
<li>
EQ =&gt; object identity. No clear behavior for numbers ofr characters, e.g. <code>(eq 3 3)</code>
and <code>(eq x x)</code> if <code>(value x)</code> =&gt; number or character. Seems really dangerous to use.
</li>
<li>
EQL =&gt; object identity + numeric and character value identity, if type is same.
e.g. <code>(eql 1 1)</code> =&gt; t, <code>(eql 1 1.0)</code> =&gt; <code>nil</code>
<ul>
<li>
book always uses EQL
</li>
</ul>
</li>
<li>
EQUAL is more generic - EQL, but also works on lists, e.g., lists are EQUAL if
their content and structure are EQUAL. Strings are EQUAL if they have same chars.
</li>
<li>
EQUALP is like EQUAL except numbers are EQUALP if they represent
the same mathematical value. <code>(EQUALP 1 1.0)</code> =&gt; <code>t</code>

</li>
</ul>
</li>
</ul>
</div>

</div>

<div id="outline-container-2.4" class="outline-3">
<h3 id="sec-2.4"><span class="section-number-3">2.4</span> Chapter 5 - Functions </h3>
<div class="outline-text-3" id="text-2.4">

<ul>
<li>
<code>(defun name (args*) "doc string" body*)</code>
</li>
<li>
Many people use -&gt; in names to denote conversion functions
ala <code>string-&gt;widget</code>
</li>
<li>
<code>(documentation 'fun_name 'function)</code>
</li>
<li>
The last expression gives the return value.
<ul>
<li>
Alternatively can use <code>(return-from)</code>
</li>
</ul>
</li>
<li>
Arg types include required, optional, multiple, keyword
<ul>
<li>
Required is obvious
</li>
<li>
<code>&amp;optional</code> - required are bound first, then any remaining are bound to
the optional args, with any leftovers bound to <code>nil</code>
<ul>
<li>
These can also use default and <code>supplied-p</code> like kw did in chapter 3
</li>
</ul>
</li>
<li>
Multiple args are specified with <code>&amp;rest</code>. Args after required and
optional are given to the rest param as a list.
</li>
<li>
Finally we get to kwargs. These must be specified after the other
3 types. Can be specified in any order so long as the keyword is
given.
<ul>
<li>
Can also name the keyword arg differently from the kw itself.
</li>
<li>
Replace the keyword with a list of the kw and the new arg name
as in <code>(:box 0) =&gt; ((:box b) 0)</code>
</li>
</ul>
</li>
</ul>
</li>
<li>
Mixing types can be dangerous. Must be used in the above specified order.
<ul>
<li>
req + * is pretty safe
</li>
<li>
optional + rest is also pretty safe.
</li>
<li>
key + (optional | rest) is dangerous.
<ul>
<li>
The kw tokens take up the optional slots.
</li>
<li>
rest receives the whole param list including the kw tokens
</li>
</ul>
</li>
</ul>
</li>
<li>
<code>(return-from block_name value)</code> where the block name is typically
the name of the function due to the nature of <code>defun</code> as a macro
</li>
<li>
The special operator <code>FUNCTION</code> gets a function object. Note that <code>#' /</code>
is just syntactic sugar for <code>FUNCTION</code>
</li>
<li>
To call a function passed in as an arg, we can use <code>(funcall f arg1 arg2 ...)</code>
but this requires a fixed number of arguments.
</li>
<li>
To get around this, you can use <code>apply</code>, which accepts a function as the
first arg, any number of loose arguments, but last arg must be a list.
</li>
</ul>
</div>
</div>
</div>
<div id="postamble">
<p class="author"> Author: Yike Lu
<a href="mailto:yikelu@Yikes-iMac.local">&lt;yikelu@Yikes-iMac.local&gt;</a>
</p>
<p class="date"> Date: 2012-06-20 22:51:33 EDT</p>
<p class="creator">HTML generated by org-mode 6.33x in emacs 23</p>
</div>
</div>
</body>
</html>
